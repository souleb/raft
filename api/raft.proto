syntax = "proto3";
option go_package = "github.com/soulebt/raft";

package api;


// The raft Vote RPC
service Vote {
  // RequestVote is called by candidates to gather votes.
  rpc RequestVote(VoteRequest) returns (VoteResponse) {}
}

// The raft RequestVote RPC arguments structure.
message VoteRequest {
  uint64 term = 1;
  int32 candidateId = 2;
  uint64 lastLogIndex = 3;
  uint64 lastLogTerm = 4;
}


// The raft RequestVote RPC response structure.
message VoteResponse {
  uint64 term = 1;
  bool voteGranted = 2;
}

// The raft Entry structure.
message Entry {
  int64 serialNumber = 1;
  uint64 term = 2;
  bytes command = 3;
}

// The raft AppendEntries RPC
service AppendEntries {
  // AppendEntries is invoked by leaders to replicate log entries and
  // to send heartbeats.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

// The raft AppendEntries RPC arguments structure.
message AppendEntriesRequest {
  uint64 term = 1;
  int32 leaderId = 2;
  uint64 prevLogIndex = 3;
  uint64 prevLogTerm = 4;
  repeated Entry entries = 5;
  uint64 leaderCommit = 6;
}

// The raft AppendEntries RPC response structure.
message AppendEntriesResponse {
  uint64 term = 1;
  bool success = 2;
  uint64 conflictTerm = 3;
  uint64 conflictIndex = 4;
}

// The raft InstallSnapshot RPC
service InstallSnapshot {
  // InstallSnapshot is invoked by the leader to send chunks of a snapshot to a follower.
  // Leaders always send chunks in order.
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}

// The raft InstallSnapshot RPC arguments structure.
message InstallSnapshotRequest {
  uint64 term = 1;
  int32 leaderId = 2;
  uint64 lastIncludedIndex = 3;
  uint64 lastIncludedTerm = 4;
  bytes data = 6;
}

// The raft InstallSnapshot RPC response structure.
message InstallSnapshotResponse {
  uint64 term = 1;
}
